// ====================
// Gesti√≥n de Calificaciones de Estudiantes
// ====================

// Lista inicial de estudiantes, cada uno con un nombre y un arreglo de calificaciones
let estudiantes = [
  { nombre: "Ana", calificaciones: [85, 90, 78, 92] },
  { nombre: "Juan", calificaciones: [70, 65, 80, 75] },
  { nombre: "Mar√≠a", calificaciones: [95, 88, 92, 98] }
];

// Calcula el promedio de un arreglo de calificaciones
function calcularPromedio(calificaciones) {
  const suma = calificaciones.reduce((acc, val) => acc + val, 0); // suma todos los valores
  return Number((suma / calificaciones.length).toFixed(2)); // divide y redondea a 2 decimales
}

// Devuelve la calificaci√≥n m√°s alta del arreglo
function obtenerMejorCalificacion(calificaciones) {
  return Math.max(...calificaciones); // usa el operador spread para comparar todos los valores
}

// Devuelve la calificaci√≥n m√°s baja del arreglo
function obtenerPeorCalificacion(calificaciones) {
  return Math.min(...calificaciones); // igual que el anterior pero busca el m√≠nimo
}

// Muestra todos los estudiantes y sus calificaciones en un alert
function mostrarEstudiantes() {
  let texto = " Lista de estudiantes:\n";
  estudiantes.forEach(est => {
    texto += `${est.nombre} ‚Üí ${est.calificaciones.join(", ")}\n`; // une las calificaciones con comas
  });
  alert(texto); // muestra el resultado
}

// Agrega una nueva calificaci√≥n a un estudiante
function agregarCalificacion() {
  const nombre = prompt("¬øA qu√© estudiante deseas agregar una calificaci√≥n?");
  const calificacion = parseFloat(prompt("¬øQu√© calificaci√≥n deseas agregar?")); // convierte texto a n√∫mero
  const estudiante = estudiantes.find(est => est.nombre === nombre); // busca al estudiante por nombre

  if (estudiante && !isNaN(calificacion)) { // verifica que exista y que la nota sea v√°lida
    estudiante.calificaciones.push(calificacion); // agrega la nota
    alert(` Calificaci√≥n ${calificacion} agregada a ${nombre}.`);
  } else {
    alert(" Estudiante no encontrado o calificaci√≥n inv√°lida.");
  }
}

// Elimina la √∫ltima calificaci√≥n del arreglo de un estudiante
function eliminarUltimaCalificacion() {
  const nombre = prompt("¬øDe qu√© estudiante deseas eliminar la √∫ltima calificaci√≥n?");
  const estudiante = estudiantes.find(est => est.nombre === nombre);

  if (estudiante && estudiante.calificaciones.length > 0) {
    const eliminada = estudiante.calificaciones.pop(); // elimina y guarda la nota eliminada
    alert(` Se elimin√≥ la calificaci√≥n ${eliminada} de ${nombre}.`);
  } else {
    alert(" Estudiante no encontrado o sin calificaciones.");
  }
}

// Muestra un reporte individual de un estudiante: notas, promedio, mejor y peor calificaci√≥n
function generarReporteIndividual() {
  const nombre = prompt("¬øDe qu√© estudiante deseas ver el reporte?");
  const estudiante = estudiantes.find(est => est.nombre === nombre);

  if (!estudiante) { // si no se encuentra, se avisa y se detiene la funci√≥n
    alert(" Estudiante no encontrado.");
    return;
  }

  // Calcula y construye el mensaje con todos los datos
  const promedio = calcularPromedio(estudiante.calificaciones);
  const mejor = obtenerMejorCalificacion(estudiante.calificaciones);
  const peor = obtenerPeorCalificacion(estudiante.calificaciones);

  let texto = ` Reporte de ${nombre}:\n`;
  texto += `Calificaciones: ${estudiante.calificaciones.join(", ")}\n`;
  texto += `Promedio: ${promedio}\n`;
  texto += `Mejor calificaci√≥n: ${mejor}\n`;
  texto += `Peor calificaci√≥n: ${peor}`;
  alert(texto);
}

// Muestra todos los estudiantes que tienen promedio mayor o igual a 70
function mostrarAprobados() {
  const aprobados = estudiantes.filter(est => calcularPromedio(est.calificaciones) >= 70);

  if (aprobados.length === 0) {
    alert(" No hay estudiantes aprobados.");
    return;
  }

  let texto = " Estudiantes Aprobados:\n\n";
  aprobados.forEach(est => {
    texto += `${est.nombre} ‚Üí Promedio: ${calcularPromedio(est.calificaciones)}\n`;
  });
  alert(texto);
}

// Ordena la lista de estudiantes alfab√©ticamente por nombre
function ordenarEstudiantesPorNombre() {
  estudiantes.sort((a, b) => a.nombre.localeCompare(b.nombre)); // ordena A-Z usando m√©todo de string
  alert("üìö Estudiantes ordenados alfab√©ticamente.");
}

// Men√∫ principal que se repite hasta que el usuario decide salir (opci√≥n 0)
function iniciarGestionCalificaciones() {
  let opcion = "";

  do {
    // Muestra las opciones disponibles al usuario
    opcion = prompt(
      " MEN√ö DE GESTI√ìN DE ESTUDIANTES \n\n" +
      "1. Mostrar estudiantes\n" +
      "2. Agregar calificaci√≥n\n" +
      "3. Eliminar √∫ltima calificaci√≥n\n" +
      "4. Ver reporte individual\n" +
      "5. Ver estudiantes aprobados\n" +
      "6. Ordenar estudiantes por nombre\n" +
      "0. Salir\n\n" +
      "Escribe el n√∫mero de la opci√≥n:"
    );

    // Ejecuta la acci√≥n seg√∫n la opci√≥n elegida
    switch (opcion) {
      case "1":
        mostrarEstudiantes();
        break;
      case "2":
        agregarCalificacion();
        break;
      case "3":
        eliminarUltimaCalificacion();
        break;
      case "4":
        generarReporteIndividual();
        break;
      case "5":
        mostrarAprobados();
        break;
      case "6":
        ordenarEstudiantesPorNombre();
        break;
      case "0":
        alert(" Hasta pronto.");
        break;
      default:
        alert(" Opci√≥n no v√°lida.");
        break;
    }
  } while (opcion !== "0"); // se repite mientras el usuario no escriba "0"
}

// Ejecuta el men√∫ cuando se carga el script
iniciarGestionCalificaciones();
